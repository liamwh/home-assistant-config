---
- alias: "Light: Turn on bathroom lights when door opens"
  trigger:
    - type: opened
      platform: device
      device_id: f71438264bf00faabf9df480352d3b25
      entity_id: binary_sensor.openclose_bathroom_door
      domain: binary_sensor
  action:
    - service: light.turn_on
      data:
        entity_id: light.bathroom_lights
        transition: 1

- alias: "Light: toggle bathroom (based on presence)"
  trigger:
    platform: state
    entity_id: binary_sensor.activity_in_bathroom
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('light.bathroom_lights', trigger.to_state.state) }}"
      - condition: state
        entity_id: input_boolean.automatic_lights
        state: "on"
  action:
    service: light.turn_{{ trigger.to_state.state }}
    data:
      entity_id: light.bathroom_lights
      transition: 1

- alias: "Light: toggle kitchen (based on presence)"
  trigger:
    platform: state
    entity_id: binary_sensor.activity_in_kitchen
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('light.kitchen_lights', trigger.to_state.state) }}"
      - condition: state
        entity_id: input_boolean.automatic_lights
        state: "on"
  action:
    - service: light.turn_{{ trigger.to_state.state }}
      data:
        entity_id: light.kitchen_lights
        transition: 1

- alias: "Light: toggle living room without elements (based on presence)"
  trigger:
    platform: state
    entity_id: binary_sensor.activity_in_living_room
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('light.living_room_lights_without_elements', trigger.to_state.state) }}"
      - condition: state
        entity_id: input_boolean.automatic_lights
        state: "on"
  action:
    - service: light.turn_{{ trigger.to_state.state }}
      data:
        entity_id: light.living_room_lights_without_elements
        transition: 1

- alias: "Light: toggle hallway (based on presence)"
  trigger:
    platform: state
    entity_id: binary_sensor.activity_in_hallway
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('light.kitchen_lights', trigger.to_state.state) }}"
      - condition: state
        entity_id: input_boolean.automatic_lights
        state: "on"
  action:
    - service: light.turn_{{ trigger.to_state.state }}
      data:
        entity_id: light.hallway_lights
        transition: 1

- alias: "Light: toggle bedroom (based on presence)"
  trigger:
    platform: state
    entity_id: binary_sensor.activity_in_bedroom
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: "{{ not is_state('light.bedroom_lights', trigger.to_state.state) }}"
      - condition: state
        entity_id: input_boolean.automatic_lights
        state: "on"
      - condition: state
        entity_id: input_select.sleep_mode
        state: "off"
  action:
    service: light.turn_{{ trigger.to_state.state }}
    data:
      entity_id: light.bedroom_lights
      transition: 1

#### Backup automations when lights are already on

- alias: "Light: turn on bathroom if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_bathroom
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
  action:
    service: light.turn_on
    data:
      entity_id: light.bathroom_lights
      transition: 1

- alias: "Light: turn on kitchen if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_kitchen
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
  action:
    - service: light.turn_on
      data:
        entity_id: light.kitchen_lights
        transition: 1

- alias: "Light: turn on hallway if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_hallway
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
  action:
    - service: light.turn_on
      data:
        entity_id: light.hallway_lights
        transition: 1

- alias: "Light: turn on cabinet if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_hallway
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
  action:
    - service: light.turn_on
      data:
        entity_id: light.cabinet_lights
        transition: 1

- alias: "Light: turn on bedroom if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_bedroom
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
    - condition: state
      entity_id: input_select.sleep_mode
      state: "off"
    - condition: time
      # At least one of the following is required.
      after: "10:00:00"
  action:
    service: light.turn_on
    data:
      entity_id: light.bedroom_lights
      transition: 1

- alias: "Light: turn on living room if motion (backup automation)"
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor_living_room
    to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.automatic_lights
      state: "on"
    - condition: state
      entity_id: input_select.sleep_mode
      state: "off"
  action:
    service: light.turn_on
    data:
      entity_id: light.living_room_lights
      transition: 1

# - alias: "Light: turn on bedroom chill when input boolean turns on"
#   trigger:
#     platform: state
#     entity_id: input_select.bedroom_chill
#     to: "off"
#   action:
#     service: input_boolean.turn_on
#     data:
#       entity_id: input_boolean.automatic_lights

- alias: "Light: turn on light automation when sleep mode turns off"
  trigger:
    platform: state
    entity_id: input_select.sleep_mode
    to: "off"
  action:
    service: input_boolean.turn_on
    data:
      entity_id: input_boolean.automatic_lights
